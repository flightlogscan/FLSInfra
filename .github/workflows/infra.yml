name: Deploy FLS Infra

on:
  push:
    paths:
      - 'terraform/**'
      - 'cloud-init/**'
      - 'scripts/**'
      - '.github/workflows/infra.yml'
  workflow_dispatch:

jobs:
  terraform:
    name: Provision Infra
    runs-on: ubuntu-latest

    env:
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get GitHub Runner Token
        id: get_token
        run: |
          TOKEN=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.APP_REPO_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/flightlogscan/FLTSpring/actions/runners/registration-token | jq -r .token)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Format Check
        run: terraform -chdir=terraform/envs/prod fmt -check

      - name: Terraform Init
        run: terraform -chdir=terraform/envs/prod init
        env:
          TF_VAR_github_runner_token: ${{ steps.get_token.outputs.token }}

      - name: Terraform Plan
        run: |
          terraform -chdir=terraform/envs/prod plan -out=tfplan
          terraform -chdir=terraform/envs/prod show -json tfplan > plan.json
        env:
          TF_VAR_github_runner_token: ${{ steps.get_token.outputs.token }}

      - name: Check for Server Changes
        id: changes
        run: |
          set -e
          jq -e . plan.json > /dev/null  # Validate JSON early

          if jq -e '
            .resource_changes[]
            | select(.type == "hcloud_server" and (.change | type == "object") and (.change.actions | index("create")))
          ' plan.json > /dev/null; then
            echo "server_change=true" >> "$GITHUB_OUTPUT"
          else
            echo "server_change=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Terraform Apply
        if: steps.changes.outputs.server_change == 'true'
        run: terraform -chdir=terraform/envs/prod apply -auto-approve tfplan
        env:
          TF_VAR_github_runner_token: ${{ steps.get_token.outputs.token }}

      - name: Get Hetzner Server IPs
        id: get_ip
        run: |
          ips=$(terraform -chdir=terraform/envs/prod output -json prod_server_ipv4_list)
          echo "server_ips=$ips" >> "$GITHUB_OUTPUT"

      - name: Get latest SHA from app repo
        id: app_sha
        run: |
          SHA=$(curl -s https://api.github.com/repos/flightlogscan/FLTSpring/commits/main | jq -r '.sha')
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: Trigger App Deploy
        if: steps.changes.outputs.server_change == 'true'
        run: |
          curl -X POST https://api.github.com/repos/flightlogscan/FLTSpring/dispatches \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.APP_REPO_PAT }}" \
            -d '{"event_type":"infra_updated", "client_payload":{"sha":"${{ steps.app_sha.outputs.sha }}"}}'

  aws_terraform:
    name: Provision AWS Route53/IAM
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform -chdir=terraform/envs/aws init

      - name: Terraform Plan
        run: |
          terraform -chdir=terraform/envs/aws plan -out=tfplan
          terraform -chdir=terraform/envs/aws show -json tfplan > plan.json

      - name: Terraform Apply
        run: terraform -chdir=terraform/envs/aws apply -auto-approve -var='hetzner_server_ip_list=${{ needs.terraform.outputs.server_ips }}'